---
title:  "R matrices and image"
date:   "2014-04-17"
categories: [code]
tags: [R, matrix]
---


## Matrix and image

In R, matrices are ordered row-wise: 


```{r}
(m <- matrix(1:12, nrow = 3, ncol = 4))
```


The *image()* function presents this as the transpose of what we see printed. 


```{r}
m[] <- 0
m[2, 1] <- -10
m[3, 2] <- 30
m
```

```{r}
t(m[, ncol(m):1])
```





> ... Notice that image interprets the z matrix as a table of f(x[i], y[j]) values, 
> so that the x axis corresponds to row number and the y axis to column number, 
> with column 1 at the bottom, i.e. a __90 degree counter-clockwise rotation__ of 
> the conventional printed layout of a matrix.
> ...


```{r}
image(m)
```


## Data placement with image()

This is fairly obvious, each cell is painted as a discrete block with cell centres evenly spaced between 0 and 1. 

```{r}
m <- matrix(1:12, 3)
image(m)
```


We didn't give it any coordinates to position the image, so it made some up. 


```{r}
image(m, main = "input coordinates are cell centres")
xx <- seq.int(0, 1, length.out = nrow(m))
yy <- seq.int(0, 1, length.out = ncol(m))
abline(h = yy, v = xx, lty = 2)
```

This lends itself to a convenient data structure. 


```{r}
dat <- list(x = xx, y = yy, z = m)
image(dat)
text(expand.grid(xx, yy), lab = as.vector(m))
```

```{r}

## points(expand.grid(xx, yy))
```


The function *image()* has some hidden tricks. 


```{r}
xcorner <- seq.int(0, 1, length.out = nrow(m) + 1L)
ycorner <- seq.int(0, 1, length.out = ncol(m) + 1L)
print(xcorner)
```


```{r}
print(ycorner)
```

```
## [1] 0.00 0.25 0.50 0.75 1.00
```

```{r}
image(xcorner, ycorner, m, main = "input coordinates are cell corners")
abline(h = ycorner, v = xcorner)
```


We can even use non-regular coordinates. 


```{r}
ycorner <- 1.5^seq_along(ycorner)
image(xcorner, ycorner, m)
abline(h = ycorner, v = xcorner)
```



##    Under the hood



```{r}
print(image.default)
```



This is  like looping with *rect()*


```{r}
op <- par(mfrow = c(1, 2))
## life is hard
cols <- topo.colors(25)
scale <- round((m - min(m))/diff(range(m)) * (length(cols) - 1) + 1)
plot(NA, type = "n", xlim = range(xcorner), ylim = range(ycorner), asp = 1)
for (i in seq_along(xcorner[-1L])) {
    for (j in seq_along(ycorner[-1L])) {
        rect(xleft = xcorner[i], ybottom = ycorner[j], xright = xcorner[i + 
            1L], ytop = ycorner[j + 1L], col = cols[scale[i, j]], angle = 45 * 
            (i + j)%%2, density = 20, lwd = 2)
    }
    
}

## life is good
image(list(x = xcorner, y = ycorner, z = m), col = topo.colors(25), asp = 1)
```


```{r}

par(op)
```


## "Raster graphics" (not the *raster* package)
 
Relatively recently native image-graphics support was added to R. 

Old style

```{r}
m <- matrix(1:12, nrow = 3)
xcorner <- seq.int(0, 1, length.out = nrow(m) + 1L)
ycorner <- seq.int(0, 1, length.out = ncol(m) + 1L)
image(xcorner, ycorner, m, col = topo.colors(25))
```
